var searchIndex = {};
searchIndex["rulinalg"] = {"doc":"# The rulinalg crate.","items":[[0,"macros","rulinalg","Macros for the linear algebra modules.",null,null],[0,"matrix","","The matrix module.",null,null],[3,"Matrix","rulinalg::matrix","The `Matrix` struct.",null,null],[3,"MatrixSlice","","A `MatrixSlice`",null,null],[3,"MatrixSliceMut","","A mutable `MatrixSliceMut`",null,null],[3,"Rows","","Row iterator.",null,null],[3,"RowsMut","","Mutable row iterator.",null,null],[3,"Diagonal","","An iterator over the diagonal elements of a matrix.",null,null],[3,"DiagonalMut","","An iterator over the mutable diagonal elements of a matrix.",null,null],[4,"Axes","","Matrix dimensions",null,null],[13,"Row","","The row axis.",0,null],[13,"Col","","The column axis.",0,null],[4,"DiagOffset","","Diagonal offset (used by Diagonal iterator).",null,null],[13,"Main","","The main diagonal of the matrix.",1,null],[13,"Above","","An offset above the main diagonal.",1,null],[13,"Below","","An offset below the main diagonal.",1,null],[11,"qr_decomp","","Compute the QR decomposition of the matrix.",2,null],[11,"cholesky","","Cholesky decomposition",2,null],[11,"bidiagonal_decomp","","Converts matrix to bidiagonal form",2,null],[11,"svd","","Singular Value Decomposition",2,null],[11,"upper_hessenberg","","Returns H, where H is the upper hessenberg form.",2,null],[11,"upper_hess_decomp","","Returns (U,H), where H is the upper hessenberg form\nand U is the unitary transform matrix.",2,null],[11,"lup_decomp","","Computes L, U, and P for LUP decomposition.",2,null],[11,"eigenvalues","","Eigenvalues of a square matrix.",2,null],[11,"eigendecomp","","Eigendecomposition of a square matrix.",2,null],[11,"index","","",2,null],[11,"index","","",3,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index_mut","","",2,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"div","","",3,null],[11,"div","","",3,null],[11,"div","","",4,null],[11,"div","","",4,null],[11,"add","","",3,null],[11,"add","","",3,null],[11,"add","","",4,null],[11,"add","","",4,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"sub","","",4,null],[11,"sub","","",4,null],[11,"add","","",2,null],[11,"add","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"sub","","",2,null],[11,"sub","","",2,null],[11,"div","","",2,null],[11,"div","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"add","","",3,null],[11,"add","","",3,null],[11,"add","","",4,null],[11,"add","","",4,null],[11,"add","","",3,null],[11,"add","","",3,null],[11,"add","","",4,null],[11,"add","","",4,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"sub","","",4,null],[11,"sub","","",4,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"sub","","",4,null],[11,"sub","","",4,null],[11,"add","","",3,null],[11,"add","","",3,null],[11,"add","","",2,null],[11,"add","","",2,null],[11,"add","","",4,null],[11,"add","","",4,null],[11,"add","","",2,null],[11,"add","","",2,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"sub","","",2,null],[11,"sub","","",2,null],[11,"sub","","",4,null],[11,"sub","","",4,null],[11,"sub","","",2,null],[11,"sub","","",2,null],[11,"add","","",2,null],[11,"add","","",2,null],[11,"sub","","",2,null],[11,"sub","","",2,null],[11,"add_assign","","",2,null],[11,"add_assign","","",2,null],[11,"sub_assign","","",2,null],[11,"sub_assign","","",2,null],[11,"div_assign","","",2,null],[11,"div_assign","","",2,null],[11,"mul_assign","","",2,null],[11,"mul_assign","","",2,null],[11,"add_assign","","",4,null],[11,"add_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"div_assign","","",4,null],[11,"div_assign","","",4,null],[11,"mul_assign","","",4,null],[11,"mul_assign","","",4,null],[11,"add_assign","","",2,null],[11,"add_assign","","",2,null],[11,"sub_assign","","",2,null],[11,"sub_assign","","",2,null],[11,"add_assign","","",4,null],[11,"add_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"add_assign","","",4,null],[11,"add_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"add_assign","","",4,null],[11,"add_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"sub_assign","","",4,null],[11,"add_assign","","",2,null],[11,"add_assign","","",2,null],[11,"sub_assign","","",2,null],[11,"sub_assign","","",2,null],[11,"add_assign","","",2,null],[11,"add_assign","","",2,null],[11,"sub_assign","","",2,null],[11,"sub_assign","","",2,null],[11,"neg","","",3,null],[11,"neg","","",4,null],[11,"neg","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"next","","",5,null],[11,"last","","",5,null],[11,"nth","","",5,null],[11,"count","","",5,null],[11,"size_hint","","",5,null],[11,"next","","",6,null],[11,"last","","",6,null],[11,"nth","","",6,null],[11,"count","","",6,null],[11,"size_hint","","",6,null],[11,"next","","",7,null],[11,"last","","",7,null],[11,"nth","","",7,null],[11,"count","","",7,null],[11,"size_hint","","",7,null],[11,"next","","",8,null],[11,"last","","",8,null],[11,"nth","","",8,null],[11,"count","","",8,null],[11,"size_hint","","",8,null],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",3,null],[11,"into_iter","","",4,null],[0,"slice","","Traits for matrices operations.",null,null],[3,"SliceIter","rulinalg::matrix::slice","Iterator for matrix.",null,null],[3,"SliceIterMut","","Iterator for mutable matrix.",null,null],[8,"BaseMatrix","","Trait for immutable matrix structs.",null,null],[10,"rows","","Rows in the matrix.",9,null],[10,"cols","","Columns in the matrix.",9,null],[10,"row_stride","","Row stride in the matrix.",9,null],[11,"is_empty","","Returns true if the matrix contais no elements",9,null],[10,"as_ptr","","Top left index of the matrix.",9,null],[11,"as_slice","","Returns a `MatrixSlice` over the whole matrix.",9,null],[11,"get_unchecked","","Get a reference to a point in the matrix without bounds checking.",9,null],[11,"get_row","","Returns the row of a matrix at the given index.\n`None` if the index is out of bounds.",9,null],[11,"get_row_unchecked","","Returns the row of a matrix at the given index without doing unbounds checking",9,null],[11,"iter","","Returns an iterator over the matrix data.",9,null],[11,"iter_rows","","Iterate over the rows of the matrix.",9,null],[11,"iter_diag","","Iterate over diagonal entries",9,null],[11,"sum_rows","","The sum of the rows of the matrix.",9,null],[11,"sum_cols","","The sum of the columns of the matrix.",9,null],[11,"sum","","The sum of all elements in the matrix",9,null],[11,"into_matrix","","Convert the matrix struct into a owned Matrix.",9,null],[11,"select_rows","","Select rows from matrix",9,null],[11,"select_cols","","Select columns from matrix",9,null],[11,"elemul","","The elementwise product of two matrices.",9,null],[11,"elediv","","The elementwise division of two matrices.",9,null],[11,"select","","Select block matrix from matrix",9,null],[11,"hcat","","Horizontally concatenates two matrices. With self on the left.",9,null],[11,"vcat","","Vertically concatenates two matrices. With self on top.",9,null],[11,"diag","","Extract the diagonal of the matrix",9,null],[11,"transpose","","Tranposes the given matrix",9,null],[11,"is_diag","","Checks if matrix is diagonal.",9,null],[11,"solve_u_triangular","","Solves an upper triangular linear system.",9,null],[11,"solve_l_triangular","","Solves a lower triangular linear system.",9,null],[11,"split_at","","Split the matrix at the specified axis returning two `MatrixSlice`s.",9,null],[11,"sub_slice","","Produce a `MatrixSlice` from an existing matrix.",9,null],[8,"BaseMatrixMut","","Trait for mutable matrices.",null,null],[10,"as_mut_ptr","","Top left index of the slice.",10,null],[11,"as_mut_slice","","Returns a `MatrixSliceMut` over the whole matrix.",10,null],[11,"get_unchecked_mut","","Get a mutable reference to a point in the matrix without bounds checks.",10,null],[11,"iter_mut","","Returns a mutable iterator over the matrix.",10,null],[11,"get_row_mut","","Returns a mutable reference to the row of a matrix at the given index.\n`None` if the index is out of bounds.",10,null],[11,"get_row_unchecked_mut","","Returns a mutable reference to the row of a matrix at the given index\nwithout doing unbounds checking",10,null],[11,"swap_rows","","Swaps two rows in a matrix.",10,null],[11,"swap_cols","","Swaps two columns in a matrix.",10,null],[11,"iter_rows_mut","","Iterate over the mutable rows of the matrix.",10,null],[11,"iter_diag_mut","","Iterate over diagonal entries mutably",10,null],[11,"set_to","","Sets the underlying matrix data to the target data.",10,null],[11,"apply","","Applies a function to each element in the matrix.",10,null],[11,"split_at_mut","","Split the matrix at the specified axis returning two `MatrixSliceMut`s.",10,null],[11,"sub_slice_mut","","Produce a `MatrixSliceMut` from an existing matrix.",10,null],[11,"rows","rulinalg::matrix","",2,null],[11,"cols","","",2,null],[11,"row_stride","","",2,null],[11,"is_empty","","",2,null],[11,"as_ptr","","",2,null],[11,"into_matrix","","",2,null],[11,"sum","","",2,null],[11,"elemul","","",2,null],[11,"elediv","","",2,null],[11,"vcat","","",2,null],[11,"rows","","",3,null],[11,"cols","","",3,null],[11,"row_stride","","",3,null],[11,"as_ptr","","",3,null],[11,"rows","","",4,null],[11,"cols","","",4,null],[11,"row_stride","","",4,null],[11,"as_ptr","","",4,null],[11,"as_mut_ptr","","Top left index of the slice.",2,null],[11,"as_mut_ptr","","Top left index of the slice.",4,null],[11,"from_matrix","","Produce a `MatrixSlice` from a `Matrix`",3,null],[11,"from_raw_parts","","Creates a `MatrixSlice` from raw parts.",3,null],[11,"reslice","","Produce a `MatrixSlice` from an existing `MatrixSlice`.",3,null],[11,"from_matrix","","Produce a `MatrixSliceMut` from a mutable `Matrix`",4,null],[11,"from_raw_parts","","Creates a `MatrixSliceMut` from raw parts.",4,null],[11,"reslice","","Produce a `MatrixSliceMut` from an existing `MatrixSliceMut`.",4,null],[11,"fmt","rulinalg::matrix::slice","",11,null],[11,"fmt","","",12,null],[11,"next","","",11,null],[11,"next","","",12,null],[11,"fmt","rulinalg::matrix","",0,null],[11,"clone","","",0,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"new","","Constructor for Matrix struct.",2,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u"}],"output":{"name":"matrix"}}],[11,"from_fn","","Constructor for Matrix struct that takes a function `f`\nand constructs a new matrix such that `A_ij = f(i, j)`,\nwhere `i` is the row index and `j` the column index.",2,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"data","","Returns a non-mutable reference to the underlying data.",2,null],[11,"mut_data","","Returns a mutable slice of the underlying data.",2,null],[11,"into_vec","","Consumes the Matrix and returns the Vec of data.",2,null],[11,"clone","","Clones the Matrix.",2,null],[11,"zeros","","Constructs matrix of all zeros.",2,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diag","","Constructs matrix with given diagonal.",2,null],[11,"ones","","Constructs matrix of all ones.",2,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"identity","","Constructs the identity matrix.",2,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"mean","","The mean of the matrix along the specified axis.",2,null],[11,"variance","","The variance of the matrix along the specified axis.",2,null],[11,"solve","","Solves the equation `Ax = y`.",2,null],[11,"inverse","","Computes the inverse of the matrix.",2,null],[11,"det","","Computes the determinant of the matrix.",2,null],[11,"norm","","Compute euclidean norm for matrix.",2,null],[11,"norm","","Compute euclidean norm for matrix.",3,null],[11,"norm","","Compute euclidean norm for matrix.",4,null],[11,"fmt","","Formats the Matrix for display.",2,null],[0,"convert","rulinalg","The convert module.",null,null],[11,"from","rulinalg::matrix","",2,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"matrixslice"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"matrixslicemut"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[0,"error","rulinalg","Error handling for the linalg module.",null,null],[3,"Error","rulinalg::error","An error related to the linalg module.",null,null],[4,"ErrorKind","","Types of errors produced in the linalg module.",null,null],[13,"InvalidArg","","An argument did not uphold a necessary criteria for the function.",13,null],[13,"DecompFailure","","A failure to decompose due to some property of the data.",13,null],[13,"AlgebraFailure","","A failure due to some algebraic constraints not being met.",13,null],[13,"DivByZero","","Tried to divide by zero",13,null],[11,"fmt","","",14,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"new","","Construct a new `Error` of a particular `ErrorKind`.",14,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"kind","","Get the kind of this `Error`.",14,null],[11,"description","","",14,null],[11,"fmt","","",14,null],[0,"utils","rulinalg","Linear algebra utils module.",null,null],[5,"dot","rulinalg::utils","Compute dot product of two slices.",null,null],[5,"unrolled_sum","","Unrolled sum",null,null],[5,"in_place_vec_bin_op","","Vectorized binary operation applied to two slices.\nThe first argument should be a mutable slice which will\nbe modified in place to prevent new memory allocation.",null,null],[5,"vec_bin_op","","Vectorized binary operation applied to two slices.",null,null],[5,"vec_sum","","Compute vector sum of two slices.",null,null],[5,"vec_sub","","Compute vector difference two slices.",null,null],[5,"ele_mul","","Computes elementwise multiplication.",null,null],[5,"ele_div","","Computes elementwise division.",null,null],[5,"argmax","","Find argmax of slice.",null,null],[5,"argmin","","Find argmin of slice.",null,null],[5,"find","","Find index of value in slice.",null,null],[0,"vector","rulinalg","The vector module.",null,null],[3,"Vector","rulinalg::vector","The Vector struct.",null,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"hash","","",15,null],[11,"new","","Constructor for Vector struct.",15,{"inputs":[{"name":"u"}],"output":{"name":"vector"}}],[11,"size","","Returns the size of the Vector.",15,null],[11,"data","","Returns a non-mutable reference to the underlying data.",15,null],[11,"mut_data","","Returns a mutable slice of the underlying data.",15,null],[11,"into_vec","","Consumes the Vector and returns the Vec of data.",15,null],[11,"iter","","Returns an iterator over the Vector&#39;s data.",15,null],[11,"iter_mut","","Returns an iterator over mutable references to the Vector&#39;s data.",15,null],[11,"into","","",15,null],[11,"into_iter","","",15,null],[11,"fmt","","Displays the Vector.",15,null],[11,"clone","","Clones the Vector.",15,null],[11,"apply","","Applies a function to each element in the vector.",15,null],[11,"argmax","","Find the argmax of the Vector.",15,null],[11,"argmin","","Find the argmin of the Vector.",15,null],[11,"select","","Select elements from the Vector and form a new Vector from them.",15,null],[11,"zeros","","Constructs Vector of all zeros.",15,{"inputs":[{"name":"usize"}],"output":{"name":"vector"}}],[11,"ones","","Constructs Vector of all ones.",15,{"inputs":[{"name":"usize"}],"output":{"name":"vector"}}],[11,"dot","","Compute dot product with specified Vector.",15,null],[11,"sum","","The sum of the vector.",15,null],[11,"elemul","","The elementwise product of two vectors.",15,null],[11,"elediv","","The elementwise division of two vectors.",15,null],[11,"mean","","The mean of the vector.",15,null],[11,"variance","","The variance of the vector.",15,null],[11,"mul","","",15,null],[11,"mul","","",15,null],[11,"div","","",15,null],[11,"div","","",15,null],[11,"add","","",15,null],[11,"add","","",15,null],[11,"add","","",15,null],[11,"add","","",15,null],[11,"sub","","",15,null],[11,"sub","","",15,null],[11,"sub","","",15,null],[11,"sub","","",15,null],[11,"neg","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"norm","","Compute euclidean norm for vector.",15,null],[11,"add_assign","","",15,null],[11,"add_assign","","",15,null],[11,"sub_assign","","",15,null],[11,"sub_assign","","",15,null],[11,"div_assign","","",15,null],[11,"div_assign","","",15,null],[11,"mul_assign","","",15,null],[11,"mul_assign","","",15,null],[11,"add_assign","","",15,null],[11,"add_assign","","",15,null],[11,"sub_assign","","",15,null],[11,"sub_assign","","",15,null],[8,"Metric","rulinalg","Trait for linear algebra metrics.",null,null],[10,"norm","","Computes the euclidean norm.",16,null],[14,"matrix","","The `matrix!` macro enables easy construction of small matrices.",null,null],[11,"from","rulinalg::vector","",15,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",15,null]],"paths":[[4,"Axes"],[4,"DiagOffset"],[3,"Matrix"],[3,"MatrixSlice"],[3,"MatrixSliceMut"],[3,"Diagonal"],[3,"DiagonalMut"],[3,"Rows"],[3,"RowsMut"],[8,"BaseMatrix"],[8,"BaseMatrixMut"],[3,"SliceIter"],[3,"SliceIterMut"],[4,"ErrorKind"],[3,"Error"],[3,"Vector"],[8,"Metric"]]};
initSearch(searchIndex);
