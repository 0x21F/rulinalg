var searchIndex = {};
searchIndex["rulinalg"] = {"doc":"# The rulinalg crate.","items":[[0,"macros","rulinalg","Macros for the linear algebra modules.",null,null],[3,"AbsoluteElementwiseComparator","rulinalg::macros","The `abs` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[12,"tol","","The maximum absolute difference tolerated (inclusive).",0,null],[3,"ExactElementwiseComparator","","The `exact` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[3,"UlpElementwiseComparator","","The `ulp` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[12,"tol","","The maximum difference in ULP units tolerated (inclusive).",1,null],[3,"FloatElementwiseComparator","","The `float` comparator used with [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"compare","","",0,null],[11,"description","","",0,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"compare","","",2,null],[11,"description","","",2,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"compare","","",1,null],[11,"description","","",1,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"compare","","",3,null],[11,"description","","",3,null],[8,"ElementwiseComparator","","Trait that describes elementwise comparators for [assert_matrix_eq!](../macro.assert_matrix_eq!.html).",null,null],[10,"compare","","Compares two elements.",4,null],[10,"description","","A description of the comparator.",4,null],[0,"matrix","rulinalg","The matrix module.",null,null],[3,"Matrix","rulinalg::matrix","The `Matrix` struct.",null,null],[3,"MatrixSlice","","A `MatrixSlice`",null,null],[3,"MatrixSliceMut","","A mutable `MatrixSliceMut`",null,null],[3,"Row","","Row of a matrix.",null,null],[3,"RowMut","","Mutable row of a matrix.",null,null],[3,"Rows","","Row iterator.",null,null],[3,"RowsMut","","Mutable row iterator.",null,null],[3,"Column","","Column of a matrix.",null,null],[3,"ColumnMut","","Mutable column of a matrix.",null,null],[3,"Diagonal","","An iterator over the diagonal elements of a matrix.",null,null],[3,"DiagonalMut","","An iterator over the mutable diagonal elements of a matrix.",null,null],[3,"SliceIter","","Iterator for matrix.",null,null],[3,"SliceIterMut","","Iterator for mutable matrix.",null,null],[4,"Axes","","Matrix dimensions",null,null],[13,"Row","","The row axis.",5,null],[13,"Col","","The column axis.",5,null],[4,"DiagOffset","","Diagonal offset (used by Diagonal iterator).",null,null],[13,"Main","","The main diagonal of the matrix.",6,null],[13,"Above","","An offset above the main diagonal.",6,null],[13,"Below","","An offset below the main diagonal.",6,null],[11,"qr_decomp","","Compute the QR decomposition of the matrix.",7,null],[11,"cholesky","","Cholesky decomposition",7,null],[11,"bidiagonal_decomp","","Converts matrix to bidiagonal form",7,null],[11,"svd","","Singular Value Decomposition",7,null],[11,"upper_hessenberg","","Returns H, where H is the upper hessenberg form.",7,null],[11,"upper_hess_decomp","","Returns (U,H), where H is the upper hessenberg form\nand U is the unitary transform matrix.",7,null],[11,"lup_decomp","","Computes L, U, and P for LUP decomposition.",7,null],[11,"eigenvalues","","Eigenvalues of a square matrix.",7,null],[11,"eigendecomp","","Eigendecomposition of a square matrix.",7,null],[11,"index","","",7,null],[11,"index","","",8,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index_mut","","",7,null],[11,"index","","",10,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"index","","",12,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"div","","",8,null],[11,"div","","",8,null],[11,"div","","",9,null],[11,"div","","",9,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"div","","",7,null],[11,"div","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add_assign","","",7,null],[11,"add_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"div_assign","","",7,null],[11,"div_assign","","",7,null],[11,"mul_assign","","",7,null],[11,"mul_assign","","",7,null],[11,"add_assign","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"div_assign","","",9,null],[11,"div_assign","","",9,null],[11,"mul_assign","","",9,null],[11,"mul_assign","","",9,null],[11,"add_assign","","",7,null],[11,"add_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"add_assign","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"add_assign","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"add_assign","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"add_assign","","",7,null],[11,"add_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"add_assign","","",7,null],[11,"add_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"sub_assign","","",7,null],[11,"neg","","",8,null],[11,"neg","","",9,null],[11,"neg","","",7,null],[11,"new","","Constructor for Matrix struct.",7,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"u"}],"output":{"name":"matrix"}}],[11,"from_fn","","Constructor for Matrix struct that takes a function `f`\nand constructs a new matrix such that `A_ij = f(i, j)`,\nwhere `i` is the row index and `j` the column index.",7,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"data","","Returns a non-mutable reference to the underlying data.",7,null],[11,"mut_data","","Returns a mutable slice of the underlying data.",7,null],[11,"into_vec","","Consumes the Matrix and returns the Vec of data.",7,null],[11,"zeros","","Constructs matrix of all zeros.",7,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diag","","Constructs matrix with given diagonal.",7,null],[11,"ones","","Constructs matrix of all ones.",7,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"identity","","Constructs the identity matrix.",7,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"mean","","The mean of the matrix along the specified axis.",7,null],[11,"variance","","The variance of the matrix along the specified axis.",7,null],[11,"solve","","Solves the equation `Ax = y`.",7,null],[11,"inverse","","Computes the inverse of the matrix.",7,null],[11,"det","","Computes the determinant of the matrix.",7,null],[11,"fmt","","Formats the Matrix for display.",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"next","","",16,null],[11,"last","","",16,null],[11,"nth","","",16,null],[11,"count","","",16,null],[11,"size_hint","","",16,null],[11,"next","","",17,null],[11,"last","","",17,null],[11,"nth","","",17,null],[11,"count","","",17,null],[11,"size_hint","","",17,null],[11,"next","","",18,null],[11,"last","","",18,null],[11,"nth","","",18,null],[11,"count","","",18,null],[11,"size_hint","","",18,null],[11,"next","","",19,null],[11,"last","","",19,null],[11,"nth","","",19,null],[11,"count","","",19,null],[11,"size_hint","","",19,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",8,null],[11,"into_iter","","",9,null],[11,"deref","","",10,null],[11,"deref","","",11,null],[11,"deref_mut","","",11,null],[11,"deref","","",12,null],[11,"deref","","",13,null],[11,"deref_mut","","",13,null],[11,"from_matrix","","Produce a `MatrixSlice` from a `Matrix`",8,null],[11,"from_raw_parts","","Creates a `MatrixSlice` from raw parts.",8,null],[11,"from_matrix","","Produce a `MatrixSliceMut` from a mutable `Matrix`",9,null],[11,"from_raw_parts","","Creates a `MatrixSliceMut` from raw parts.",9,null],[11,"rows","","",7,null],[11,"cols","","",7,null],[11,"row_stride","","",7,null],[11,"is_empty","","",7,null],[11,"as_ptr","","",7,null],[11,"into_matrix","","",7,null],[11,"sum","","",7,null],[11,"elemul","","",7,null],[11,"elediv","","",7,null],[11,"vcat","","",7,null],[11,"rows","","",8,null],[11,"cols","","",8,null],[11,"row_stride","","",8,null],[11,"as_ptr","","",8,null],[11,"rows","","",9,null],[11,"cols","","",9,null],[11,"row_stride","","",9,null],[11,"as_ptr","","",9,null],[11,"as_mut_ptr","","Top left index of the slice.",7,null],[11,"as_mut_ptr","","Top left index of the slice.",9,null],[11,"rows","","",10,null],[11,"cols","","",10,null],[11,"row_stride","","",10,null],[11,"as_ptr","","",10,null],[11,"rows","","",11,null],[11,"cols","","",11,null],[11,"row_stride","","",11,null],[11,"as_ptr","","",11,null],[11,"as_mut_ptr","","Top left index of the slice.",11,null],[11,"rows","","",12,null],[11,"cols","","",12,null],[11,"row_stride","","",12,null],[11,"as_ptr","","",12,null],[11,"rows","","",13,null],[11,"cols","","",13,null],[11,"row_stride","","",13,null],[11,"as_ptr","","",13,null],[11,"as_mut_ptr","","Top left index of the slice.",13,null],[8,"BaseMatrix","","Trait for immutable matrix structs.",null,null],[10,"rows","","Rows in the matrix.",20,null],[10,"cols","","Columns in the matrix.",20,null],[10,"row_stride","","Row stride in the matrix.",20,null],[11,"is_empty","","Returns true if the matrix contais no elements",20,null],[10,"as_ptr","","Top left index of the matrix.",20,null],[11,"as_slice","","Returns a `MatrixSlice` over the whole matrix.",20,null],[11,"get_unchecked","","Get a reference to a point in the matrix without bounds checking.",20,null],[11,"col","","Returns the column of a matrix at the given index.\n`None` if the index is out of bounds.",20,null],[11,"col_unchecked","","Returns the column of a matrix at the given\nindex without doing a bounds check.",20,null],[11,"row","","Returns the row of a matrix at the given index.",20,null],[11,"row_unchecked","","Returns the row of a matrix at the given index without doing unbounds checking",20,null],[11,"iter","","Returns an iterator over the matrix data.",20,null],[11,"row_iter","","Iterate over the rows of the matrix.",20,null],[11,"diag_iter","","Iterate over diagonal entries",20,null],[11,"sum_rows","","The sum of the rows of the matrix.",20,null],[11,"sum_cols","","The sum of the columns of the matrix.",20,null],[11,"norm","","Compute given matrix norm for matrix.",20,null],[11,"metric","","Compute the metric distance between two matrices.",20,null],[11,"sum","","The sum of all elements in the matrix",20,null],[11,"into_matrix","","Convert the matrix struct into a owned Matrix.",20,null],[11,"select_rows","","Select rows from matrix",20,null],[11,"select_cols","","Select columns from matrix",20,null],[11,"elemul","","The elementwise product of two matrices.",20,null],[11,"elediv","","The elementwise division of two matrices.",20,null],[11,"select","","Select block matrix from matrix",20,null],[11,"hcat","","Horizontally concatenates two matrices. With self on the left.",20,null],[11,"vcat","","Vertically concatenates two matrices. With self on top.",20,null],[11,"diag","","Extract the diagonal of the matrix",20,null],[11,"transpose","","Tranposes the given matrix",20,null],[11,"is_diag","","Checks if matrix is diagonal.",20,null],[11,"solve_u_triangular","","Solves an upper triangular linear system.",20,null],[11,"solve_l_triangular","","Solves a lower triangular linear system.",20,null],[11,"split_at","","Split the matrix at the specified axis returning two `MatrixSlice`s.",20,null],[11,"sub_slice","","Produce a `MatrixSlice` from an existing matrix.",20,null],[8,"BaseMatrixMut","","Trait for mutable matrices.",null,null],[10,"as_mut_ptr","","Top left index of the slice.",21,null],[11,"as_mut_slice","","Returns a `MatrixSliceMut` over the whole matrix.",21,null],[11,"get_unchecked_mut","","Get a mutable reference to a point in the matrix without bounds checks.",21,null],[11,"iter_mut","","Returns a mutable iterator over the matrix.",21,null],[11,"col_mut","","Returns a mutable reference to the column of a matrix at the given index.\n`None` if the index is out of bounds.",21,null],[11,"col_unchecked_mut","","Returns a mutable reference to the column of a matrix at the given index\nwithout doing a bounds check.",21,null],[11,"row_mut","","Returns a mutable reference to the row of a matrix at the given index.\n`None` if the index is out of bounds.",21,null],[11,"row_unchecked_mut","","Returns a mutable reference to the row of a matrix at the given index\nwithout doing a bounds check.",21,null],[11,"swap_rows","","Swaps two rows in a matrix.",21,null],[11,"swap_cols","","Swaps two columns in a matrix.",21,null],[11,"row_iter_mut","","Iterate over the mutable rows of the matrix.",21,null],[11,"diag_iter_mut","","Iterate over diagonal entries mutably",21,null],[11,"set_to","","Sets the underlying matrix data to the target data.",21,null],[11,"apply","","Applies a function to each element in the matrix.",21,null],[11,"split_at_mut","","Split the matrix at the specified axis returning two `MatrixSliceMut`s.",21,null],[11,"sub_slice_mut","","Produce a `MatrixSliceMut` from an existing matrix.",21,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",11,null],[11,"raw_slice","","Returns the row as a slice.",10,null],[11,"raw_slice","","Returns the row as a slice.",11,null],[11,"raw_slice_mut","","Returns the row as a slice.",11,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",13,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",16,null],[11,"fmt","","",17,null],[11,"fmt","","",14,null],[11,"fmt","","",15,null],[0,"convert","rulinalg","The convert module.",null,null],[11,"from","rulinalg::matrix","",7,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"matrixslice"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"matrixslicemut"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"try_into","","Attempts to convert the matrix into a new matrix of different scalar type.",7,null],[0,"error","rulinalg","Error handling for the linalg module.",null,null],[3,"Error","rulinalg::error","An error related to the linalg module.",null,null],[4,"ErrorKind","","Types of errors produced in the linalg module.",null,null],[13,"InvalidArg","","An argument did not uphold a necessary criteria for the function.",22,null],[13,"DecompFailure","","A failure to decompose due to some property of the data.",22,null],[13,"AlgebraFailure","","A failure due to some algebraic constraints not being met.",22,null],[13,"DivByZero","","Tried to divide by zero",22,null],[13,"ScalarConversionFailure","","Failure due to inability to convert between scalar types",22,null],[11,"fmt","","",23,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"new","","Construct a new `Error` of a particular `ErrorKind`.",23,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"kind","","Get the kind of this `Error`.",23,null],[11,"description","","",23,null],[11,"fmt","","",23,null],[0,"utils","rulinalg","Linear algebra utils module.",null,null],[5,"dot","rulinalg::utils","Compute dot product of two slices.",null,null],[5,"unrolled_sum","","Unrolled sum",null,null],[5,"in_place_vec_bin_op","","Vectorized binary operation applied to two slices.\nThe first argument should be a mutable slice which will\nbe modified in place to prevent new memory allocation.",null,null],[5,"vec_bin_op","","Vectorized binary operation applied to two slices.",null,null],[5,"vec_sum","","Compute vector sum of two slices.",null,null],[5,"vec_sub","","Compute vector difference two slices.",null,null],[5,"ele_mul","","Computes elementwise multiplication.",null,null],[5,"ele_div","","Computes elementwise division.",null,null],[5,"argmax","","Find argmax of slice.",null,null],[5,"argmin","","Find argmin of slice.",null,null],[5,"find","","Find index of value in slice.",null,null],[0,"vector","rulinalg","The vector module.",null,null],[3,"Vector","rulinalg::vector","The Vector struct.",null,null],[11,"fmt","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"hash","","",24,null],[11,"new","","Constructor for Vector struct.",24,{"inputs":[{"name":"u"}],"output":{"name":"vector"}}],[11,"from_fn","","Constructor for Vector struct that takes a function `f`\nand constructs a new vector such that `V_i = f(i)`,\nwhere `i` is the index.",24,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"vector"}}],[11,"size","","Returns the size of the Vector.",24,null],[11,"data","","Returns a non-mutable reference to the underlying data.",24,null],[11,"mut_data","","Returns a mutable slice of the underlying data.",24,null],[11,"into_vec","","Consumes the Vector and returns the Vec of data.",24,null],[11,"iter","","Returns an iterator over the Vector&#39;s data.",24,null],[11,"iter_mut","","Returns an iterator over mutable references to the Vector&#39;s data.",24,null],[11,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",24,null],[11,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element at the given index,\nwithout doing bounds checking.",24,null],[11,"into","","",24,null],[11,"into_iter","","",24,null],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Displays the Vector.",24,null],[11,"clone","","Clones the Vector.",24,null],[11,"apply","","Applies a function to each element in the vector.",24,null],[11,"argmax","","Find the argmax of the Vector.",24,null],[11,"argmin","","Find the argmin of the Vector.",24,null],[11,"select","","Select elements from the Vector and form a new Vector from them.",24,null],[11,"zeros","","Constructs Vector of all zeros.",24,{"inputs":[{"name":"usize"}],"output":{"name":"vector"}}],[11,"ones","","Constructs Vector of all ones.",24,{"inputs":[{"name":"usize"}],"output":{"name":"vector"}}],[11,"dot","","Compute dot product with specified Vector.",24,null],[11,"sum","","The sum of the vector.",24,null],[11,"elemul","","The elementwise product of two vectors.",24,null],[11,"elediv","","The elementwise division of two vectors.",24,null],[11,"norm","","Compute vector norm for vector.",24,null],[11,"metric","","Compute metric distance between two vectors.",24,null],[11,"mean","","The mean of the vector.",24,null],[11,"variance","","The variance of the vector.",24,null],[11,"mul","","",24,null],[11,"mul","","",24,null],[11,"div","","",24,null],[11,"div","","",24,null],[11,"add","","",24,null],[11,"add","","",24,null],[11,"add","","",24,null],[11,"add","","",24,null],[11,"sub","","",24,null],[11,"sub","","",24,null],[11,"sub","","",24,null],[11,"sub","","",24,null],[11,"neg","","",24,null],[11,"index","","",24,null],[11,"index_mut","","",24,null],[11,"add_assign","","",24,null],[11,"add_assign","","",24,null],[11,"sub_assign","","",24,null],[11,"sub_assign","","",24,null],[11,"div_assign","","",24,null],[11,"div_assign","","",24,null],[11,"mul_assign","","",24,null],[11,"mul_assign","","",24,null],[11,"add_assign","","",24,null],[11,"add_assign","","",24,null],[11,"sub_assign","","",24,null],[11,"sub_assign","","",24,null],[0,"ulp","rulinalg","Tools for ULP-based comparison of floating point numbers.",null,null],[4,"UlpComparisonResult","rulinalg::ulp","Represents the result of an ULP-based comparison between two floating point numbers.",null,null],[13,"ExactMatch","","Signifies an exact match between two floating point numbers.",25,null],[13,"Difference","","The difference in ULP between two floating point numbers.",25,null],[13,"IncompatibleSigns","","The two floating point numbers have different signs,\nand cannot be compared in a meaningful way.",25,null],[13,"Nan","","One or both of the two floating point numbers is a NaN,\nin which case the ULP comparison is not meaningful.",25,null],[8,"Ulp","","Floating point types for which two instances can be compared for Unit in the Last Place (ULP) difference.",null,null],[10,"ulp_diff","","Returns the difference between two floating point numbers, measured in ULP.",26,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ulpcomparisonresult"}}],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[0,"norm","rulinalg","The norm module",null,null],[3,"Euclidean","rulinalg::norm","The Euclidean norm",null,null],[4,"Lp","","The Lp norm",null,null],[13,"Infinity","","The L-infinity norm (supremum)",27,null],[13,"Integer","","The Lp norm where p is an integer",27,null],[13,"Float","","The Lp norm where p is a float",27,null],[8,"VectorNorm","","Trait for vector norms",null,null],[10,"norm","","Computes the vector norm.",28,null],[8,"VectorMetric","","Trait for vector metrics.",null,null],[10,"metric","","Computes the metric distance between two vectors.",29,null],[8,"MatrixNorm","","Trait for matrix norms.",null,null],[10,"norm","","Computes the matrix norm.",30,null],[8,"MatrixMetric","","Trait for matrix metrics.",null,null],[10,"metric","","Computes the metric distance between two matrices.",31,null],[11,"fmt","","",32,null],[11,"norm","","",32,null],[11,"norm","","",32,null],[11,"fmt","","",27,null],[11,"norm","","",27,null],[11,"norm","","",27,null],[14,"matrix","rulinalg","The `matrix!` macro enables easy construction of small matrices.",null,null],[14,"assert_matrix_eq","","Compare matrices for exact or approximate equality.",null,null],[14,"assert_vector_eq","","Compare vectors for exact or approximate equality.",null,null],[11,"is_empty","rulinalg::matrix","Returns true if the matrix contais no elements",20,null],[11,"as_slice","","Returns a `MatrixSlice` over the whole matrix.",20,null],[11,"get_unchecked","","Get a reference to a point in the matrix without bounds checking.",20,null],[11,"col","","Returns the column of a matrix at the given index.\n`None` if the index is out of bounds.",20,null],[11,"col_unchecked","","Returns the column of a matrix at the given\nindex without doing a bounds check.",20,null],[11,"row","","Returns the row of a matrix at the given index.",20,null],[11,"row_unchecked","","Returns the row of a matrix at the given index without doing unbounds checking",20,null],[11,"iter","","Returns an iterator over the matrix data.",20,null],[11,"row_iter","","Iterate over the rows of the matrix.",20,null],[11,"diag_iter","","Iterate over diagonal entries",20,null],[11,"sum_rows","","The sum of the rows of the matrix.",20,null],[11,"sum_cols","","The sum of the columns of the matrix.",20,null],[11,"norm","","Compute given matrix norm for matrix.",20,null],[11,"metric","","Compute the metric distance between two matrices.",20,null],[11,"sum","","The sum of all elements in the matrix",20,null],[11,"into_matrix","","Convert the matrix struct into a owned Matrix.",20,null],[11,"select_rows","","Select rows from matrix",20,null],[11,"select_cols","","Select columns from matrix",20,null],[11,"elemul","","The elementwise product of two matrices.",20,null],[11,"elediv","","The elementwise division of two matrices.",20,null],[11,"select","","Select block matrix from matrix",20,null],[11,"hcat","","Horizontally concatenates two matrices. With self on the left.",20,null],[11,"vcat","","Vertically concatenates two matrices. With self on top.",20,null],[11,"diag","","Extract the diagonal of the matrix",20,null],[11,"transpose","","Tranposes the given matrix",20,null],[11,"is_diag","","Checks if matrix is diagonal.",20,null],[11,"solve_u_triangular","","Solves an upper triangular linear system.",20,null],[11,"solve_l_triangular","","Solves a lower triangular linear system.",20,null],[11,"split_at","","Split the matrix at the specified axis returning two `MatrixSlice`s.",20,null],[11,"sub_slice","","Produce a `MatrixSlice` from an existing matrix.",20,null],[11,"as_mut_slice","","Returns a `MatrixSliceMut` over the whole matrix.",21,null],[11,"get_unchecked_mut","","Get a mutable reference to a point in the matrix without bounds checks.",21,null],[11,"iter_mut","","Returns a mutable iterator over the matrix.",21,null],[11,"col_mut","","Returns a mutable reference to the column of a matrix at the given index.\n`None` if the index is out of bounds.",21,null],[11,"col_unchecked_mut","","Returns a mutable reference to the column of a matrix at the given index\nwithout doing a bounds check.",21,null],[11,"row_mut","","Returns a mutable reference to the row of a matrix at the given index.\n`None` if the index is out of bounds.",21,null],[11,"row_unchecked_mut","","Returns a mutable reference to the row of a matrix at the given index\nwithout doing a bounds check.",21,null],[11,"swap_rows","","Swaps two rows in a matrix.",21,null],[11,"swap_cols","","Swaps two columns in a matrix.",21,null],[11,"row_iter_mut","","Iterate over the mutable rows of the matrix.",21,null],[11,"diag_iter_mut","","Iterate over diagonal entries mutably",21,null],[11,"set_to","","Sets the underlying matrix data to the target data.",21,null],[11,"apply","","Applies a function to each element in the matrix.",21,null],[11,"split_at_mut","","Split the matrix at the specified axis returning two `MatrixSliceMut`s.",21,null],[11,"sub_slice_mut","","Produce a `MatrixSliceMut` from an existing matrix.",21,null],[11,"from","rulinalg::vector","",24,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",24,null]],"paths":[[3,"AbsoluteElementwiseComparator"],[3,"UlpElementwiseComparator"],[3,"ExactElementwiseComparator"],[3,"FloatElementwiseComparator"],[8,"ElementwiseComparator"],[4,"Axes"],[4,"DiagOffset"],[3,"Matrix"],[3,"MatrixSlice"],[3,"MatrixSliceMut"],[3,"Row"],[3,"RowMut"],[3,"Column"],[3,"ColumnMut"],[3,"SliceIter"],[3,"SliceIterMut"],[3,"Diagonal"],[3,"DiagonalMut"],[3,"Rows"],[3,"RowsMut"],[8,"BaseMatrix"],[8,"BaseMatrixMut"],[4,"ErrorKind"],[3,"Error"],[3,"Vector"],[4,"UlpComparisonResult"],[8,"Ulp"],[4,"Lp"],[8,"VectorNorm"],[8,"VectorMetric"],[8,"MatrixNorm"],[8,"MatrixMetric"],[3,"Euclidean"]]};
initSearch(searchIndex);
